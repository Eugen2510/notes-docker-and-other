Составляющие части docker: 
	- client - можно понимать как терминал, куда вводятся команды на необходимые клиенту дейсвия.
	- DOCKER-HOST - принимает команды от клиента и обрабатывает их
	- registry - хранилище, где хранятся образы итд

Примеры:
	- При выполнении какой-либо команды от client, она попадает на DOCKER-HOST, docker daemon, который является частью DOCKER-HOST ищет необходимый образ в registry(хранилище) и скачивает его
	- docker run -d -p 80:80 docker/getting-started - конкретно эта прога найдет образ image getting-started и запустит на поту 80 документацию docker
	- Скачивание необходимого image из терминала:
		- docker pull amazoncorretto:17 - где amazoncorretto - это имя image необходимого нам. Эта команда скачает необходимый нам образ. После ":" указывается необходимая нам версия, если версии не указать то по умолчанию будет загружена последняя (latest)
		- docker run -it amazoncorretto:17 после скачивания образа выполняем команду данная команда создаст контейнер с образом amazoncorretto и запустит его опция -it - говорит, что приложение нужно запустить в интерактивном режиме. i - интерактивный, t - взаимодействие через терминал
		- docker run -it --name <CONTAINER_NAME> amazoncorretto:17 - делает то же самое, что и команда выше, но создает контейнер с указанным именем (CONTAINER_NAME)
		- docker start <CONTAINER_NAME/CONTAINER_ID> - в случае, если контейнер уже создан можно выполнить эту команду указав имя или id контейнера 


Команды (запускают полезную работу):
	-run - запускает контейнер, так же скачивает образ, если такого нет на машине
	-pull - скачивает контейнер
	-docker - (документация) выводит список всех команд и доступных опций
	-docker <COMAND_NAME> --help - выводит документацию по интересующей команде(COMAND_NAME) имя команды указывается без кавычек
	-docker info - выводит информацию о docker, сколько всего контейнеров, сколько из них запущено, сколько находится на паузе итд
	-docker images - выводит инфо о image(образы) которые установлены
	-docker ps - выводит подробную инфо о запущеных контейнерах, с id, ports итд
	-docker stop <CONTAINER_ID> - остановит контейнер с указанным id
	-docker start <CONTAINER_ID> - запустит контейнер с указанным id
	-docker pause <CONTAINER_ID> - поставит на паузу контейнер с указанным id
	-docker unpause <CONTAINER_ID> - снимет с паузы контейнер с указанным id
	-docker restart <CONTAINER_ID> - перезапустит контейнер с указанным id
	-docker run -p 8080:8080 1e580d964736 - запуск из dockerfile контейнера -p - указываем порты которые слушают приложение
	-docker build -t <image_name> ./ - собираем приложение из docerfile; "-t" означает title, после него указываем имя image, которое мы хотим установить; "./" - расположение docerfile относительно папки из которой запускаем

Опции (используются с командами для уточнения деталей):
	-d - исполльзуется с командой run, запускает процесс контейнера на заднем фоне, можно продолжать вводить команды в терминале
	-p - соединяет порты, в доках указано: публикация портов контейнера на хост

Образы (images) - готовые решения, которые содержат определенный функционал, образы нельзя изменять, их можно скачать и на основании их организовать  свое приложение

Dockerfile
	FROM openjdk - имя образа, который используется

	RUN mkdir /out - создание директории внутри контейнера, которая в дальнейшем будет рабочей дирректорией для docker

	COPY ./Main.jar /out - часть ./Main.jar указывает на файл исходник, где содержится проект, часть /out - указывает рабочую дирректорию внутри контейнера docker

	WORKDIR /out - рабочая дирректория docker

	CMD ["java", "-jar", "Main.jar"] - команды которые используем для запуска проекта например призапуске из терминала, нужно было бы прописать java -jar Main.jar
	
	--docker run -p 8080:8080 1e580d964736 - пример запуска контейнера с портами

Docker-compose
	В этом файле можжно описать множество образов, которые будет использовать наше приложение
